/*
 * Geocoding
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.geocoding.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.geocoding.ApiClient;
/**
 * A search text suggested for the input of the searchLocationsByText endpoint.
 */
@JsonPropertyOrder({
  Suggestion.JSON_PROPERTY_CAPTION,
  Suggestion.JSON_PROPERTY_SUB_CAPTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-25T08:00:34.656092099Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Suggestion {
  public static final String JSON_PROPERTY_CAPTION = "caption";
  private String caption;

  public static final String JSON_PROPERTY_SUB_CAPTION = "subCaption";
  private String subCaption;

  public Suggestion() { 
  }

  public Suggestion caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * A search address suggestion that can be displayed on a user interface as caption.
   * @return caption
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CAPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCaption() {
    return caption;
  }


  @JsonProperty(JSON_PROPERTY_CAPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCaption(String caption) {
    this.caption = caption;
  }


  public Suggestion subCaption(String subCaption) {
    this.subCaption = subCaption;
    return this;
  }

  /**
   * An additional address information for the suggestion that can be displayed on a user interface as sub caption.
   * @return subCaption
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUB_CAPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getSubCaption() {
    return subCaption;
  }


  @JsonProperty(JSON_PROPERTY_SUB_CAPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubCaption(String subCaption) {
    this.subCaption = subCaption;
  }


  /**
   * Return true if this Suggestion object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Suggestion suggestion = (Suggestion) o;
    return Objects.equals(this.caption, suggestion.caption) &&
        Objects.equals(this.subCaption, suggestion.subCaption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, subCaption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Suggestion {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    subCaption: ").append(toIndentedString(subCaption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `caption` to the URL query string
    if (getCaption() != null) {
      joiner.add(String.format("%scaption%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCaption()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `subCaption` to the URL query string
    if (getSubCaption() != null) {
      joiner.add(String.format("%ssubCaption%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getSubCaption()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

