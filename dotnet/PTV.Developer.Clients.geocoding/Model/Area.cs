/*
 * Geocoding
 *
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.geocoding.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.geocoding.Model
{
    /// <summary>
    /// Defines the area as [GeoJSON](https://datatracker.ietf.org/doc/html/rfc7946) geometry. Supported geometry types are Polygon and MultiPolygon. Geometries that cause too long processing times will be rejected. In this case an error response is returned that explains the reason.
    /// </summary>
    [DataContract(Name = "Area")]
    public partial class Area : IEquatable<Area>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Area() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Area" /> class.
        /// </summary>
        /// <param name="geometry">The geometry of the area as a [GeoJSON](https://datatracker.ietf.org/doc/html/rfc7946) representation (WGS84/EPSG:4326). (required).</param>
        public Area(string geometry = default(string))
        {
            // to ensure "geometry" is required (not null)
            if (geometry == null)
            {
                throw new ArgumentNullException("geometry is a required property for Area and cannot be null");
            }
            this.Geometry = geometry;
        }

        /// <summary>
        /// The geometry of the area as a [GeoJSON](https://datatracker.ietf.org/doc/html/rfc7946) representation (WGS84/EPSG:4326).
        /// </summary>
        /// <value>The geometry of the area as a [GeoJSON](https://datatracker.ietf.org/doc/html/rfc7946) representation (WGS84/EPSG:4326).</value>
        [DataMember(Name = "geometry", IsRequired = true, EmitDefaultValue = true)]
        public string Geometry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Area {\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Area);
        }

        /// <summary>
        /// Returns true if Area instances are equal
        /// </summary>
        /// <param name="input">Instance of Area to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Area input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Geometry == input.Geometry ||
                    (this.Geometry != null &&
                    this.Geometry.Equals(input.Geometry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Geometry != null)
                {
                    hashCode = (hashCode * 59) + this.Geometry.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
