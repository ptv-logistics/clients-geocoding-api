/*
 * Geocoding
 *
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.geocoding.Client;
using PTV.Developer.Clients.geocoding.Model;

namespace PTV.Developer.Clients.geocoding.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlacesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places within a requested area.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        PlacesSearchResult SearchPlacesByArea(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places within a requested area.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        ApiResponse<PlacesSearchResult> SearchPlacesByAreaWithHttpInfo(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        PlacesSearchResult SearchPlacesByPosition(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        ApiResponse<PlacesSearchResult> SearchPlacesByPositionWithHttpInfo(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        PlacesSearchResult SearchPlacesByText(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        ApiResponse<PlacesSearchResult> SearchPlacesByTextWithHttpInfo(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlacesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places within a requested area.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByAreaAsync(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places within a requested area.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesSearchResult>> SearchPlacesByAreaWithHttpInfoAsync(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByPositionAsync(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesSearchResult>> SearchPlacesByPositionWithHttpInfoAsync(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByTextAsync(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for places based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlacesSearchResult>> SearchPlacesByTextWithHttpInfoAsync(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlacesApi : IPlacesApiSync, IPlacesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlacesApi : IPlacesApi
    {
        private PTV.Developer.Clients.geocoding.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlacesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlacesApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.geocoding.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.geocoding.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlacesApi(PTV.Developer.Clients.geocoding.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.geocoding.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlacesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlacesApi(PTV.Developer.Clients.geocoding.Client.ISynchronousClient client, PTV.Developer.Clients.geocoding.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.geocoding.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.geocoding.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Searches for places within a requested area.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        public PlacesSearchResult SearchPlacesByArea(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = SearchPlacesByAreaWithHttpInfo(placesByAreaRequest, categoryFilter, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places within a requested area.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> SearchPlacesByAreaWithHttpInfo(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'placesByAreaRequest' is set
            if (placesByAreaRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'placesByAreaRequest' when calling PlacesApi->SearchPlacesByArea");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.Data = placesByAreaRequest;

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByArea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlacesSearchResult>("/places/by-area", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByArea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for places within a requested area.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        public async System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByAreaAsync(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = await SearchPlacesByAreaWithHttpInfoAsync(placesByAreaRequest, categoryFilter, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places within a requested area.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="placesByAreaRequest"></param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult>> SearchPlacesByAreaWithHttpInfoAsync(PlacesByAreaRequest placesByAreaRequest, List<string> categoryFilter = default(List<string>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'placesByAreaRequest' is set
            if (placesByAreaRequest == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'placesByAreaRequest' when calling PlacesApi->SearchPlacesByArea");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            localVarRequestOptions.Data = placesByAreaRequest;

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByArea";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlacesSearchResult>("/places/by-area", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByArea", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for places near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        public PlacesSearchResult SearchPlacesByPosition(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = SearchPlacesByPositionWithHttpInfo(latitude, longitude, radius, categoryFilter, limit, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> SearchPlacesByPositionWithHttpInfo(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'latitude' when calling PlacesApi->SearchPlacesByPosition");
            }

            // verify the required parameter 'longitude' is set
            if (longitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'longitude' when calling PlacesApi->SearchPlacesByPosition");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByPosition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlacesSearchResult>("/places/by-position/{latitude}/{longitude}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByPosition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for places near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        public async System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByPositionAsync(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = await SearchPlacesByPositionWithHttpInfoAsync(latitude, longitude, radius, categoryFilter, limit, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="limit">Limits the number of results that are returned. (optional, default to 5)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult>> SearchPlacesByPositionWithHttpInfoAsync(double? latitude, double? longitude, int? radius = default(int?), List<string> categoryFilter = default(List<string>), int? limit = default(int?), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'latitude' when calling PlacesApi->SearchPlacesByPosition");
            }

            // verify the required parameter 'longitude' is set
            if (longitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'longitude' when calling PlacesApi->SearchPlacesByPosition");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByPosition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlacesSearchResult>("/places/by-position/{latitude}/{longitude}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByPosition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for places based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlacesSearchResult</returns>
        public PlacesSearchResult SearchPlacesByText(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = SearchPlacesByTextWithHttpInfo(searchText, categoryFilter, countryFilter, language, center, radius, boundingBox);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlacesSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> SearchPlacesByTextWithHttpInfo(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling PlacesApi->SearchPlacesByText");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (center != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "center", center));
            }
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlacesSearchResult>("/places/by-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for places based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlacesSearchResult</returns>
        public async System.Threading.Tasks.Task<PlacesSearchResult> SearchPlacesByTextAsync(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult> localVarResponse = await SearchPlacesByTextWithHttpInfoAsync(searchText, categoryFilter, countryFilter, language, center, radius, boundingBox, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for places based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a place.</param>
        /// <param name="categoryFilter">A comma-separated list of place category IDs. Only results having one of these categories will be returned. If no filter is specified, all categories will be returned. However, empty values are not allowed. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="center">Defines a circular search context. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). A certain radius around the center is considered and this can be adapted by setting the parameter &#x60;radius&#x60; in addition. Note: The parameters &#x60;center&#x60; respectively &#x60;radius&#x60; and &#x60;boundingBox&#x60; (if available) are mutually exclusive. (optional)</param>
        /// <param name="radius">The search radius [m] around the given position. (optional, default to 1000)</param>
        /// <param name="boundingBox">Defines a rectangular search context. The format of the &#x60;boundingBox&#x60; parameter is a comma-separated list of double values setting the maximum latitude _top_, the minimum longitude _left_, the minimum latitude _bottom_ and the maximum longitude _right_, i. e. &#x60;&lt;top&gt;,&lt;left&gt;,&lt;bottom&gt;,&lt;right&gt;&#x60;. The values for _top_ and _bottom_ from south to north between -90 and 90 as well as for _left_ and _right_ between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). Note: The parameters &#x60;boundingBox&#x60; and &#x60;center&#x60; respectively &#x60;radius&#x60; are mutually exclusive. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlacesSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<PlacesSearchResult>> SearchPlacesByTextWithHttpInfoAsync(string searchText, List<string> categoryFilter = default(List<string>), List<string> countryFilter = default(List<string>), string language = default(string), List<double?> center = default(List<double?>), int? radius = default(int?), List<double?> boundingBox = default(List<double?>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling PlacesApi->SearchPlacesByText");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (categoryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "categoryFilter", categoryFilter));
            }
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (center != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "center", center));
            }
            if (radius != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "radius", radius));
            }
            if (boundingBox != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "boundingBox", boundingBox));
            }

            localVarRequestOptions.Operation = "PlacesApi.SearchPlacesByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlacesSearchResult>("/places/by-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPlacesByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
