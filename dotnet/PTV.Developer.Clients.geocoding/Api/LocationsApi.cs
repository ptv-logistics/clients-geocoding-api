/*
 * Geocoding
 *
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.geocoding.Client;
using PTV.Developer.Clients.geocoding.Model;

namespace PTV.Developer.Clients.geocoding.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsByAddressResponse</returns>
        SuggestionsByAddressResponse GetSuggestionsByAddress(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsByAddressResponse</returns>
        ApiResponse<SuggestionsByAddressResponse> GetSuggestionsByAddressWithHttpInfo(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsByTextResponse</returns>
        SuggestionsByTextResponse GetSuggestionsByText(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsByTextResponse</returns>
        ApiResponse<SuggestionsByTextResponse> GetSuggestionsByTextWithHttpInfo(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a multi-field address input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        LocationsSearchResult SearchLocationsByAddress(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a multi-field address input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        ApiResponse<LocationsSearchResult> SearchLocationsByAddressWithHttpInfo(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        LocationsSearchResult SearchLocationsByPosition(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        ApiResponse<LocationsSearchResult> SearchLocationsByPositionWithHttpInfo(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        LocationsSearchResult SearchLocationsByText(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        ApiResponse<LocationsSearchResult> SearchLocationsByTextWithHttpInfo(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsByAddressResponse</returns>
        System.Threading.Tasks.Task<SuggestionsByAddressResponse> GetSuggestionsByAddressAsync(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsByAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionsByAddressResponse>> GetSuggestionsByAddressWithHttpInfoAsync(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsByTextResponse</returns>
        System.Threading.Tasks.Task<SuggestionsByTextResponse> GetSuggestionsByTextAsync(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsByTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionsByTextResponse>> GetSuggestionsByTextWithHttpInfoAsync(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a multi-field address input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByAddressAsync(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a multi-field address input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResult>> SearchLocationsByAddressWithHttpInfoAsync(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByPositionAsync(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations near a given geographical position.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResult>> SearchLocationsByPositionWithHttpInfoAsync(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByTextAsync(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for locations based on a single-field text input.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationsSearchResult>> SearchLocationsByTextWithHttpInfoAsync(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApi : ILocationsApiSync, ILocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationsApi : ILocationsApi
    {
        private PTV.Developer.Clients.geocoding.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.geocoding.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.geocoding.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocationsApi(PTV.Developer.Clients.geocoding.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.geocoding.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.geocoding.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.geocoding.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LocationsApi(PTV.Developer.Clients.geocoding.Client.ISynchronousClient client, PTV.Developer.Clients.geocoding.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.geocoding.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.geocoding.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.geocoding.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.geocoding.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsByAddressResponse</returns>
        public SuggestionsByAddressResponse GetSuggestionsByAddress(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByAddressResponse> localVarResponse = GetSuggestionsByAddressWithHttpInfo(inputField, country, state, locality, postalCode, street, houseNumber, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsByAddressResponse</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByAddressResponse> GetSuggestionsByAddressWithHttpInfo(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "street", street));
            }
            if (houseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "houseNumber", houseNumber));
            }
            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "inputField", inputField));
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetSuggestionsByAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuggestionsByAddressResponse>("/suggestions/by-address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestionsByAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsByAddressResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionsByAddressResponse> GetSuggestionsByAddressAsync(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByAddressResponse> localVarResponse = await GetSuggestionsByAddressWithHttpInfoAsync(inputField, country, state, locality, postalCode, street, houseNumber, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for the address input of the searchLocationsByAddress endpoint.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputField">Used to specify for which parameter of the suggestions/by-address request a suggestion is desired.</param>
        /// <param name="country">The country or its initial characters to which the suggestion search is limited. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">The state or its initial characters to which the suggestion search is limited. A state is a subdivision of a country, for example a real state, a region or a province. (optional)</param>
        /// <param name="locality">The locality or its initial characters to which the suggestion search is limited. The locality may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code or zip-code or its initial characters to which the suggestion search is limited. (optional)</param>
        /// <param name="street">The name of the road or its initial characters to which the suggestion search is limited. It must not contain additional information like building names, floor numbers or apartment numbers. (optional)</param>
        /// <param name="houseNumber">The exact house number to which the suggestion search is limited. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsByAddressResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByAddressResponse>> GetSuggestionsByAddressWithHttpInfoAsync(InputField inputField, string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "street", street));
            }
            if (houseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "houseNumber", houseNumber));
            }
            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "inputField", inputField));
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetSuggestionsByAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuggestionsByAddressResponse>("/suggestions/by-address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestionsByAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuggestionsByTextResponse</returns>
        public SuggestionsByTextResponse GetSuggestionsByText(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByTextResponse> localVarResponse = GetSuggestionsByTextWithHttpInfo(searchText, countryFilter, center, language);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuggestionsByTextResponse</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByTextResponse> GetSuggestionsByTextWithHttpInfo(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling LocationsApi->GetSuggestionsByText");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (center != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "center", center));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetSuggestionsByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuggestionsByTextResponse>("/suggestions/by-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestionsByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuggestionsByTextResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionsByTextResponse> GetSuggestionsByTextAsync(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByTextResponse> localVarResponse = await GetSuggestionsByTextWithHttpInfoAsync(searchText, countryFilter, center, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets suggestions for the input of the searchLocationsByText endpoint.  This method is in a preview state. It is stable, but feature changes could be introduced in the future.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that partially describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="center">Defines a search center. The format of the &#x60;center&#x60; parameter is a comma-separated pair of double values setting the latitude and longitude, i. e. &#x60;&lt;lat&gt;,&lt;lon&gt;&#x60;. The values for the latitude from south to north between -90 and 90 and for the longitude between -180 and 180 from west to east are in degrees (WGS84/EPSG:4326). (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuggestionsByTextResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<SuggestionsByTextResponse>> GetSuggestionsByTextWithHttpInfoAsync(string searchText, List<string> countryFilter = default(List<string>), List<double?> center = default(List<double?>), string language = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling LocationsApi->GetSuggestionsByText");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (center != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "center", center));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }

            localVarRequestOptions.Operation = "LocationsApi.GetSuggestionsByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuggestionsByTextResponse>("/suggestions/by-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSuggestionsByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations based on a multi-field address input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        public LocationsSearchResult SearchLocationsByAddress(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = SearchLocationsByAddressWithHttpInfo(country, state, locality, postalCode, street, houseNumber, countryFilter, language, results, totalScoreType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations based on a multi-field address input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> SearchLocationsByAddressWithHttpInfo(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "street", street));
            }
            if (houseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "houseNumber", houseNumber));
            }
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (totalScoreType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "totalScoreType", totalScoreType));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResult>("/locations/by-address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations based on a multi-field address input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByAddressAsync(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = await SearchLocationsByAddressWithHttpInfoAsync(country, state, locality, postalCode, street, houseNumber, countryFilter, language, results, totalScoreType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations based on a multi-field address input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">The country in which the locations should be searched. A country may be defined by name, ISO code (ISO 3166-1 alpha-2 or alpha-3) or country code plate. (optional)</param>
        /// <param name="state">A subdivision of a country, for example a state, a region or a province. Using this field narrows down the search and reduces the number of possible results. (optional)</param>
        /// <param name="locality">The locality of the address, which may be a city, a district or subdistrict. (optional)</param>
        /// <param name="postalCode">The postal code, or zip-code, which is used by a postal authority of a country to identify where the address is located. (optional)</param>
        /// <param name="street">The name of the road where the address is located. It must not contain additional information like building names, floor numbers or apartment numbers. It may contain a house number, but using the **houseNumber** field instead will lead to better results. (optional)</param>
        /// <param name="houseNumber">The house number of the address. (optional)</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="totalScoreType">Defines how Location.quality.totalScore is calculated.    * &#x60;INPUT_AND_RESULT_BASED&#x60; - The total score is calculated by comparing the result against the input.    * &#x60;RESULT_BASED&#x60; - The total score is calculated by classifying result attributes.      This parameter is experimental and may change at any time in the future. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult>> SearchLocationsByAddressWithHttpInfoAsync(string country = default(string), string state = default(string), string locality = default(string), string postalCode = default(string), string street = default(string), string houseNumber = default(string), List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), TotalScoreType? totalScoreType = default(TotalScoreType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (country != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "country", country));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (locality != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "locality", locality));
            }
            if (postalCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "postalCode", postalCode));
            }
            if (street != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "street", street));
            }
            if (houseNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "houseNumber", houseNumber));
            }
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (totalScoreType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "totalScoreType", totalScoreType));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResult>("/locations/by-address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        public LocationsSearchResult SearchLocationsByPosition(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = SearchLocationsByPositionWithHttpInfo(latitude, longitude, language, minimumPopulation);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> SearchLocationsByPositionWithHttpInfo(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'latitude' when calling LocationsApi->SearchLocationsByPosition");
            }

            // verify the required parameter 'longitude' is set
            if (longitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'longitude' when calling LocationsApi->SearchLocationsByPosition");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minimumPopulation != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "minimumPopulation", minimumPopulation));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByPosition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResult>("/locations/by-position/{latitude}/{longitude}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByPosition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByPositionAsync(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = await SearchLocationsByPositionWithHttpInfoAsync(latitude, longitude, language, minimumPopulation, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations near a given geographical position.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="minimumPopulation">If specified, the response contains only the nearest city or town with at least the given population. The **locationType** of this result will be _LOCALITY_, street information will not be returned.  This parameter is in an experimental state and may change at any time. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult>> SearchLocationsByPositionWithHttpInfoAsync(double? latitude, double? longitude, string language = default(string), int? minimumPopulation = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'latitude' when calling LocationsApi->SearchLocationsByPosition");
            }

            // verify the required parameter 'longitude' is set
            if (longitude == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'longitude' when calling LocationsApi->SearchLocationsByPosition");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("latitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(latitude)); // path parameter
            localVarRequestOptions.PathParameters.Add("longitude", PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToString(longitude)); // path parameter
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minimumPopulation != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "minimumPopulation", minimumPopulation));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByPosition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResult>("/locations/by-position/{latitude}/{longitude}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByPosition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LocationsSearchResult</returns>
        public LocationsSearchResult SearchLocationsByText(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0)
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = SearchLocationsByTextWithHttpInfo(searchText, countryFilter, language, results, cleanInput);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LocationsSearchResult</returns>
        public PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> SearchLocationsByTextWithHttpInfo(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling LocationsApi->SearchLocationsByText");
            }

            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (cleanInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "cleanInput", cleanInput));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LocationsSearchResult>("/locations/by-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for locations based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationsSearchResult</returns>
        public async System.Threading.Tasks.Task<LocationsSearchResult> SearchLocationsByTextAsync(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult> localVarResponse = await SearchLocationsByTextWithHttpInfoAsync(searchText, countryFilter, language, results, cleanInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for locations based on a single-field text input.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.geocoding.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchText">Free-form text input that describes a location.</param>
        /// <param name="countryFilter">A comma-separated list of country codes according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. The search will only consider data from countries with these codes. If no filter is specified, all countries are taken into account. However, empty values are not allowed.     If a given subdivision code is not supported, only the first two digits referring to the country are considered in the search and a **warningCode** &#x60;GEOCODING_COUNTRY_FILTER_MODIFIED&#x60; is returned with the response. (optional)</param>
        /// <param name="language">The preferred language for the response formatted according to [ISO-639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php) for languages or [BCP47](https://tools.ietf.org/html/bcp47) for language variants. By default the service uses the language spoken in the country or region of the result. In case the given preferred language is not available in the data, the default language is used. (optional)</param>
        /// <param name="results">Comma-separated list that defines which results will be returned.  * &#x60;ADDRESS_SCORES&#x60;  - Populate location.quality.addressScores. (optional)</param>
        /// <param name="cleanInput">If set to &#x60;true&#x60;, the service will try (for certain countries) to clean the input in a pre-processing step. This helps to expedite processing if the input is a free-form text that may contain garbage. This flag may influence the scores in the response. For more details see the corresponding [concept](./concepts/clean-input).      This parameter is experimental and may change at any time in the future. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationsSearchResult)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.geocoding.Client.ApiResponse<LocationsSearchResult>> SearchLocationsByTextWithHttpInfoAsync(string searchText, List<string> countryFilter = default(List<string>), string language = default(string), List<Results> results = default(List<Results>), bool? cleanInput = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchText' is set
            if (searchText == null)
            {
                throw new PTV.Developer.Clients.geocoding.Client.ApiException(400, "Missing required parameter 'searchText' when calling LocationsApi->SearchLocationsByText");
            }


            PTV.Developer.Clients.geocoding.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.geocoding.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.geocoding.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "searchText", searchText));
            if (countryFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "countryFilter", countryFilter));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("csv", "results", results));
            }
            if (cleanInput != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.geocoding.Client.ClientUtils.ParameterToMultiMap("", "cleanInput", cleanInput));
            }

            localVarRequestOptions.Operation = "LocationsApi.SearchLocationsByText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LocationsSearchResult>("/locations/by-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLocationsByText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
