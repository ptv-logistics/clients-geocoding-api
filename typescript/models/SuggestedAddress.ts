/* tslint:disable */
/* eslint-disable */
/**
 * Geocoding
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * An address suggested for the input of the searchLocationsByAddress endpoint.
 * @export
 * @interface SuggestedAddress
 */
export interface SuggestedAddress {
    /**
     * A summary of this suggestion that can be displayed on a user interface.
     * @type {string}
     * @memberof SuggestedAddress
     */
    caption: string;
    /**
     * The country of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    country?: string;
    /**
     * The state/province of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    state?: string;
    /**
     * The postal code or zip code of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    postalCode?: string;
    /**
     * The locality of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    locality?: string;
    /**
     * The street of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    street?: string;
    /**
     * The house number of the suggested address or the provided input.
     * @type {string}
     * @memberof SuggestedAddress
     */
    houseNumber?: string;
}

/**
 * Check if a given object implements the SuggestedAddress interface.
 */
export function instanceOfSuggestedAddress(value: object): value is SuggestedAddress {
    if (!('caption' in value) || value['caption'] === undefined) return false;
    return true;
}

export function SuggestedAddressFromJSON(json: any): SuggestedAddress {
    return SuggestedAddressFromJSONTyped(json, false);
}

export function SuggestedAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuggestedAddress {
    if (json == null) {
        return json;
    }
    return {
        
        'caption': json['caption'],
        'country': json['country'] == null ? undefined : json['country'],
        'state': json['state'] == null ? undefined : json['state'],
        'postalCode': json['postalCode'] == null ? undefined : json['postalCode'],
        'locality': json['locality'] == null ? undefined : json['locality'],
        'street': json['street'] == null ? undefined : json['street'],
        'houseNumber': json['houseNumber'] == null ? undefined : json['houseNumber'],
    };
}

export function SuggestedAddressToJSON(value?: SuggestedAddress | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'caption': value['caption'],
        'country': value['country'],
        'state': value['state'],
        'postalCode': value['postalCode'],
        'locality': value['locality'],
        'street': value['street'],
        'houseNumber': value['houseNumber'],
    };
}

