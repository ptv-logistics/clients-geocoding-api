/* tslint:disable */
/* eslint-disable */
/**
 * Geocoding
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.18
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoadAccessPosition } from './RoadAccessPosition';
import {
    RoadAccessPositionFromJSON,
    RoadAccessPositionFromJSONTyped,
    RoadAccessPositionToJSON,
} from './RoadAccessPosition';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { ReferencePosition } from './ReferencePosition';
import {
    ReferencePositionFromJSON,
    ReferencePositionFromJSONTyped,
    ReferencePositionToJSON,
} from './ReferencePosition';

/**
 * 
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
    /**
     * 
     * @type {ReferencePosition}
     * @memberof LocationProperties
     */
    referencePosition: ReferencePosition;
    /**
     * 
     * @type {RoadAccessPosition}
     * @memberof LocationProperties
     */
    roadAccessPosition?: RoadAccessPosition;
    /**
     * 
     * @type {Address}
     * @memberof LocationProperties
     */
    address: Address;
    /**
     * A single string representing the address, typically consisting of the street, house number, postal code, city, and country. The precise format may differ based on what is appropriate for the address.
     * @type {string}
     * @memberof LocationProperties
     */
    formattedAddress?: string;
    /**
     * A unique identifier for a location or a place in UUID format that can be used to provide feedback. It can also be used to provide feedback that none of the returned locations or places was a match. 
     *  
     *  This is experimental and may change at any time in the future.
     * @type {string}
     * @memberof LocationProperties
     */
    feedbackId?: string;
}

/**
 * Check if a given object implements the LocationProperties interface.
 */
export function instanceOfLocationProperties(value: object): value is LocationProperties {
    if (!('referencePosition' in value) || value['referencePosition'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    return true;
}

export function LocationPropertiesFromJSON(json: any): LocationProperties {
    return LocationPropertiesFromJSONTyped(json, false);
}

export function LocationPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationProperties {
    if (json == null) {
        return json;
    }
    return {
        
        'referencePosition': ReferencePositionFromJSON(json['referencePosition']),
        'roadAccessPosition': json['roadAccessPosition'] == null ? undefined : RoadAccessPositionFromJSON(json['roadAccessPosition']),
        'address': AddressFromJSON(json['address']),
        'formattedAddress': json['formattedAddress'] == null ? undefined : json['formattedAddress'],
        'feedbackId': json['feedbackId'] == null ? undefined : json['feedbackId'],
    };
}

export function LocationPropertiesToJSON(value?: LocationProperties | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'referencePosition': ReferencePositionToJSON(value['referencePosition']),
        'roadAccessPosition': RoadAccessPositionToJSON(value['roadAccessPosition']),
        'address': AddressToJSON(value['address']),
        'formattedAddress': value['formattedAddress'],
        'feedbackId': value['feedbackId'],
    };
}

